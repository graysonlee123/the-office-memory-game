{"version":3,"sources":["components/DifficultySlider/index.js","components/Sidebar/index.js","components/GameButton/index.js","App.js","index.js"],"names":["Slider","state","difficulty","handleUpdateDifficulty","event","document","getElementById","setAttribute","setState","target","value","handleSubmit","preventDefault","button","getAttribute","props","changeDifficulty","className","this","name","type","min","max","maxDifficulty","onChange","id","onClick","data-ready","React","Component","Navbar","score","highScore","DifficultySlider","href","GameButton","imageLink","updateGuess","src","alt","MakeConfetti","App","victoryScreen","buttonGuesses","buttonPossibilities","renderScreen","quoteIdx","Math","floor","random","quotes","length","initialVelocityY","initializeGame","quote","character","map","key","componentDidMount","finishGame","winBoolean","render","console","log","randomizeOrder","characters","slice","includes","display","classList","add","setTimeout","remove","arr","i","j","ReactDOM"],"mappings":"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","file":"static/js/main.161a5d9d.chunk.js","sourcesContent":["import React from 'react';\nimport './Slider.css';\n\nclass Slider extends React.Component {\n    state = {\n        difficulty: 10\n    }\n\n    handleUpdateDifficulty = event => {\n        document.getElementById('difficulty-submit-btn').setAttribute('data-ready', 'true');\n        this.setState({\n            difficulty: event.target.value\n        }, () => {\n            // btn.setAttribute('data-ready', 'true');\n        });\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n    \n        const button = document.getElementById('difficulty-submit-btn');\n\n        if (button.getAttribute('data-ready') === \"false\")\n            return;\n        \n        this.props.changeDifficulty(this.state.difficulty);\n        button.setAttribute('data-ready', 'false')\n    }\n\n    render () {\n        return (\n            <form className=\"difficulty-form\">\n                <div className=\"score faint\">{this.state.difficulty}</div>\n                <div>Characters</div>\n                <div className=\"slider-container\">\n                    <input className=\"difficulty-slider\" name=\"difficulty-slider\" type=\"range\" min=\"2\" max={this.props.maxDifficulty} value={this.state.difficulty} onChange={this.handleUpdateDifficulty}/>\n                </div>\n                <div className=\"button-container\">\n                    <button id='difficulty-submit-btn' className=\"difficulty-button\" onClick={this.handleSubmit} data-ready=\"false\">Submit</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default Slider;","import React from 'react';\nimport './Sidebar.css'\nimport DifficultySlider from '../DifficultySlider';\n\nclass Navbar extends React.Component {\n    state = {\n      score: 0\n    }\n\n    render() {\n      return (\n        <nav>\n          <div>\n            <div className=\"score-wrapper\">\n              <div className=\"score\">\n                {this.props.score}\n              </div>\n              <div>\n                Current Score\n              </div>\n            </div>\n            <div className=\"score-wrapper\">\n              <div className=\"score faint\">\n                {this.props.highScore}\n              </div>\n              <div>\n                High Score\n              </div>\n            </div>\n            <DifficultySlider maxDifficulty={this.props.maxDifficulty} changeDifficulty={this.props.changeDifficulty} />\n          </div>\n          <div className=\"footer-text\">\n            Made with ðŸ’œ by <a href=\"https://github.com/graysonlee123\" target=\"_blank\">graysonlee123</a>\n          </div>\n        </nav>\n      );\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport './GameButton.css';\n\nclass GameButton extends React.Component {\n    render() {\n        const {imageLink, id, updateGuess} = this.props;\n\n        return (\n            <button onClick={() => updateGuess(id)} className=\"game-button\">\n                <img src={imageLink} alt=\"Game button\"/>\n            </button>\n        )\n    }\n}\n\nexport default GameButton;","import React from \"react\";\nimport characters from \"./characters.json\";\nimport Navbar from \"./components/Sidebar\";\nimport GameButton from \"./components/GameButton\";\nimport quotes from './quotes.json';\nimport Confetti from 'react-confetti';\n\nfunction MakeConfetti() {\n  return (\n    <Confetti />\n  )\n}\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    difficulty: 10,\n    victoryScreen: false,\n    buttonGuesses: [],\n    buttonPossibilities: []\n  };\n\n  renderScreen = () => {\n    if (this.state.victoryScreen === true) {\n      const quoteIdx =  Math.floor(Math.random() * quotes.length);\n\n\n      return (\n        <div className=\"victory-wrapper\">\n          <MakeConfetti initialVelocityY=\"10000\" />\n          <div className=\"victory-header\">You win!</div>\n          <button className=\"victory-button\" onClick={this.initializeGame}>Go Again</button>\n          <p className=\"victory-quote\">\"{quotes[quoteIdx].quote}\"</p>\n          <p className=\"victory-quote-character\">{quotes[quoteIdx].character}</p>\n        </div>\n      )\n    } else return (\n      <main id=\"game-wrapper\">\n        <div className=\"game-desc\">\n          <div className=\"headers-container\">\n            <h2 className=\"text-headers\">The</h2>\n            <h1 className=\"text-headers\">Office</h1>\n          </div>\n          <div className=\"desc\">\n            <div className=\"desc-header\">About the Game</div>\n            <div className=\"desc-text faint\">\n              The objective of the game is to click all the characters{\" \"}\n              <i>once</i>. They shuffle around, so make sure you keep track of\n              your previous guesses.\n            </div>\n          </div>\n        </div>\n        <div id=\"game-cards\">\n          {this.state.buttonPossibilities.map(({ imageLink, id }) => (\n            <GameButton\n              key={id}\n              id={id}\n              imageLink={imageLink}\n              updateGuess={this.updateGuess}\n            />\n          ))}\n        </div>\n      </main>\n    );\n    \n  }\n\n  componentDidMount = () => {\n    this.initializeGame();\n  };\n\n  finishGame = (winBoolean = false) => {\n    if (winBoolean) {\n      this.setState({ victoryScreen: true }, () => {\n        this.render();\n      });\n    } else {\n      console.log(\"Defeat\");\n      this.initializeGame();\n    }\n  };\n\n  initializeGame = () => {\n    this.setState({\n      score: 0,\n      victoryScreen: false,\n      buttonPossibilities: this.randomizeOrder(characters).slice(\n        characters.length - this.state.difficulty\n      ),\n      buttonGuesses: []\n    });\n  };\n\n  updateGuess = id => {\n    if (this.state.buttonGuesses.includes(id)) {\n      this.finishGame();\n\n      const display = document.getElementById(\"game-cards\");\n\n      display.classList.add(\"shake-animation\");\n      setTimeout(() => {\n        display.classList.remove(\"shake-animation\");\n      }, 400);\n\n      return;\n    }\n\n    this.setState(\n      {\n        buttonGuesses: [...this.state.buttonGuesses, id],\n        buttonPossibilities: this.randomizeOrder(\n          this.state.buttonPossibilities\n        ),\n        score: 1 + this.state.score,\n        highScore:\n          this.state.score > this.state.highScore\n            ? this.state.score\n            : this.state.highScore\n      },\n      () => {\n        if (this.state.highScore < this.state.score) {\n          this.setState({ highScore: this.state.score });\n        }\n\n        if (this.state.score === this.state.buttonPossibilities.length) {\n          this.finishGame(true);\n        }\n      }\n    );\n  };\n\n  randomizeOrder = arr => {\n    // This is a Fisher-Yates shuffle algorithm.\n    // It moves selects, from the last index, and shuffles through\n    // to the beginning of the array while setting values\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n\n    return arr;\n\n    // this.setState({\n    //   buttonPossibilities: rand\n    // });\n  };\n\n  changeDifficulty = difficulty => {\n    this.setState({ difficulty: difficulty }, () => {\n      this.initializeGame();\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"page-container\">\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          maxDifficulty={characters.length}\n          changeDifficulty={this.changeDifficulty}\n        />\n        {this.renderScreen()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}